version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: hathor-guardian-db
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: hathor_guardian
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - hathor-network

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: hathor-guardian-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - hathor-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: hathor-guardian-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/hathor_guardian?authSource=admin
      REDIS_HOST: redis
      REDIS_PORT: 6379
      AI_ENGINE_URL: http://ai-engine:8001
      FRONTEND_URL: http://localhost:3000
    ports:
      - "5000:5000"
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./backend/logs:/app/logs
    networks:
      - hathor-network

  # AI Engine
  ai-engine:
    build:
      context: ./ai-engine
      dockerfile: Dockerfile
    container_name: hathor-guardian-ai
    restart: unless-stopped
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "8001:8001"
    depends_on:
      - redis
    volumes:
      - ./ai-engine/models:/app/models
      - ./ai-engine/logs:/app/logs
    networks:
      - hathor-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: hathor-guardian-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:5000
      REACT_APP_WS_URL: ws://localhost:5000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - hathor-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: hathor-guardian-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
      - ai-engine
    networks:
      - hathor-network

volumes:
  mongodb_data:
  redis_data:

networks:
  hathor-network:
    driver: bridge